version: '2.1'

services:

  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    container_name: 'gitlab-ce'
    restart: always
    hostname: 'gitlab.nac.local'
    environment:
      - TZ=Pacific/Auckland
      - GITLAB_TIMEZONE=Auckland
      - GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN=networkascoderunners
      - GITLAB_HOST=http://gitlab.nac.local
    ports:
      - '80:80'
      - '443:443'
      - '2222:22'
    volumes:
      - '/srv/gitlab/config:/etc/gitlab'
      - '/srv/gitlab/logs:/var/log/gitlab'
      - '/srv/gitlab/data:/var/opt/gitlab'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://gitlab.nac.local"]
      interval: 10s
      timeout: 10s
      retries: 60
    extra_hosts:
      - "gitlab.nac.local:192.168.1.100"

  docker_runner1:
    image: gitlab/gitlab-runner
    container_name: 'docker-runner1'
    restart: always
    depends_on:
      gitlab:
          condition: service_healthy
    volumes:
      - /srv/gitlab-runner/config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "gitlab.nac.local:192.168.1.100"

  register-runner1:
    restart: 'no'
    container_name: 'register-runner1'
    image: gitlab/gitlab-runner:alpine
    depends_on:
      - docker_runner1
    volumes:
      - /srv/gitlab-runner/config:/etc/gitlab-runner
    command:
      - register
      - --non-interactive
      - --locked=false
      - --name=Docker-Runner1
      - --executor=docker
      - --docker-image=alpine:3
      - --tag-list=test1,test2
      - --run-untagged=false
      - --docker-volumes=/var/run/docker.sock:/var/run/docker.sock
    environment:
      - CI_SERVER_URL=http://gitlab.nac.local/
      - REGISTRATION_TOKEN=networkascoderunners
    extra_hosts:
      - "gitlab.nac.local:192.168.1.100"

  netbox: &netbox
    build:
      context: .
      args:
        - BRANCH=${VERSION-master}
    image: netboxcommunity/netbox:${VERSION-latest}
    depends_on:
      - postgres
      - redis
      - netbox-worker
    env_file: env/netbox.env
    volumes:
      - ./startup_scripts:/opt/netbox/startup_scripts:ro
      - ./initializers:/opt/netbox/initializers:ro
      - ./configuration:/etc/netbox/config:ro
      - ./reports:/etc/netbox/reports:ro
      - netbox-nginx-config:/etc/netbox-nginx/
      - netbox-static-files:/opt/netbox/netbox/static
      - netbox-media-files:/opt/netbox/netbox/media
  netbox-worker:
    <<: *netbox
    depends_on:
      - redis
    entrypoint:
      - python3
      - /opt/netbox/netbox/manage.py
    command:
      - rqworker
  nginx:
    command: nginx -c /etc/netbox-nginx/nginx.conf
    image: nginx:1.15-alpine
    depends_on:
      - netbox
    ports:
      - '8080:8080'
    volumes:
      - netbox-static-files:/opt/netbox/netbox/static:ro
      - netbox-nginx-config:/etc/netbox-nginx/:ro
  postgres:
    image: postgres:10.4-alpine
    env_file: env/postgres.env
    volumes:
    - netbox-postgres-data:/var/lib/postgresql/data
  redis:
    image: redis:4-alpine
    command:
      - sh
      - -c # this is to evaluate the $REDIS_PASSWORD from the env
      - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: env/redis.env
    volumes:
      - netbox-redis-data:/data
volumes:
  netbox-static-files:
    driver: local
  netbox-nginx-config:
    driver: local
  netbox-media-files:
    driver: local
  netbox-report-files:
    driver: local
  netbox-postgres-data:
    driver: local
  netbox-redis-data:
    driver: local